name: slide-command
on:
  repository_dispatch:
    types: [slide-command]
jobs:
  slide:
    runs-on: ubuntu-latest
    steps:
      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.SLIDE_WORKFLOWS_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: eyes

      - name: Split args
        uses: jungwinter/split@v1.1.0
        id: split
        with:
          msg: '${{ github.event.client_payload.slash_command.args }}'
          seperator: ' expect? '

      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.SLIDE_WORKFLOWS_TOKEN }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.event.client_payload.github.payload.repository.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref || 'master' }}

      - name: Cache Rust
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
            ~/.cargo/
            ~/.rustup/
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build and run
        id: run
        run: |
          cargo build
          target/debug/slide ${{ steps.split.outputs._0 }} &> out.slide || true
          SLIDE_OUT=$(cat out.slide)
          JSON_STRING=$(jq -cn --arg out "$SLIDE_OUT" '{slide_out: $out}')
          echo "::set-output name=matrix::$JSON_STRING"

      - name: Check JSON
        run: echo ${{ steps.run.outputs.matrix }}

      - name: Check expectation
        id: exp
        run: |
          echo "::set-output name=exp_exists::${{ steps.split.outputs._1 != null }}"
          echo "::set-output name=exp_succ::${{ steps.split.outputs._1 == fromJson(steps.run.outputs.matrix).slide_out }}"

      - name: Expectation success
        id: exp_succ
        if: ${{ steps.exp.outputs.exp_exists == 'true' && steps.exp.outputs.exp_succ }}
        run: |
          echo "${{ steps.exp.outputs.exp_exists }}"
          echo "::set-output name=msg:::white_check_mark: expectation succeeded"

      - name: Expectation failure
        id: exp_fail
        if: ${{ steps.exp.outputs.exp_exists == 'true' && !steps.exp.outputs.exp_succ }}
        run: |
          echo "${{ steps.exp.outputs.exp_exists }}"
          echo "::set-output name=msg:::x: expectation failed"

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.SLIDE_WORKFLOWS_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            > slide ${{ github.event.client_payload.slash_command.args }} (${{ github.event.client_payload.github.payload.comment.html_url }})

            ${{ steps.exp_succ.outputs.msg || steps.exp_fail.outputs.msg || '' }}

            ```
            ${{ fromJson(steps.run.outputs.matrix).slide_out }}
            ```

            [Command run output][1]

            [1]: https://github.com/ayazhafiz/slide-workflows/actions/runs/${{ github.run_id }}

      - name: Create issue
        if: ${{ steps.exp.outputs.exp_exists == 'true' && !steps.exp.outputs.exp_succ }}
        uses: maxkomarychev/oction-create-issue@v0.7.1
        with:
          token: ${{ secrets.SLIDE_WORKFLOWS_TOKEN }}
          repo: ${{ github.event.client_payload.github.payload.repository.full_name }}
          title: "slide ${{ github.event.client_payload.slash_command.args }} -/> ${{ steps.split.outputs._1 }}"
          body: |
            Expected `slide ${{ github.event.client_payload.slash_command.args }}` to output:

            ```
            ${{ steps.split.outputs._1 }}
            ```

            Actual output:

            ```
            ${{ fromJson(steps.run.outputs.matrix).slide_out }}
            ```

            This issue was created for a failed [slide command expectation][1].

            [Command run output][2].

            [1]: ${{ github.event.client_payload.github.payload.comment.html_url }}
            [2]: https://github.com/ayazhafiz/slide-workflows/actions/runs/${{ github.run_id }}

